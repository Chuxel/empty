name: 'VSCDC smoke test'
inputs:
  definition:
    description: 'Definition to test'
    required: true
    default: 'debian'
  image:
    description: 'Image to run smoke test in'
    required: true
    default: 'none'

runs:
  using: composite
  steps:
    - name: Build image
      id: build_image
      shell: bash
      run: |
        set -e

        # Run test build
        yarn install
        GIT_BRANCH=$(echo "${{ github.ref }}" | grep -oP 'refs/(heads|tags)/\K(.+)')
        if [ "$GIT_BRANCH" == "" ]; then 
            GIT_BRANCH=main
        fi
        chmod +x build/vscdc
        build/vscdc push  ${{ inputs.definition }} \
                          --no-push \
                          --release $GIT_BRANCH \
                          --github-repo "microsoft/vscode-dev-containers" \
                          --registry "mcr.microsoft.com" \
                          --registry-path "vscode/devcontainers" \
                          --stub-registry "mcr.microsoft.com" \
                          --stub-registry-path "vscode/devcontainers"

    - name: Test image
      id: test_image
      shell: bash
      run: |
        if [ "${{ inputs.image }}" = "none" ]; then
          echo "Image not specified. Aborting test."
          exit 0
        fi

        # Fake out existance of extensions, VS Code server
        dev_container_relative_path="/containers/${{ inputs.definition }}/.devcontainer/devcontainer.json"
        mkdir -p "/tmp/${dev_container_relative_path}"
        cp -f $(pwd)/${dev_container_relative_path} "/tmp/${dev_container_relative_path}"
        sed -i'.bak' -e "s/\\/\\/.*/ /g" "/tmp/${dev_container_relative_path}"
        extensions="$(jq '.extensions' --compact-output "/tmp/${dev_container_relative_path}" | tr -d '[' | tr -d ']' | tr ',' ' ')"
        docker run --rm --init --privileged -u "${{ inputs.user }}" "${{ inputs.image }}" /bin/sh -c "\
          mkdir -p \"\$HOME/.vscode-test-server/extensions\" \ 
          cd \"\$HOME/.vscode-test-server/extensions\" \ 
          echo \"${extensions}\" | xargs -n 1 mkdir -p"

        # Run actual test
        docker run --rm --init --privileged -u "${{ inputs.user }}" -v "$(pwd)/containers/${{ inputs.definition }}:/workspace" "${{ inputs.image }}" /bin/sh -c  '\
          set -e
          cd /workspace \
          && if [ -f "test-project/test.sh" ]; then \
            cd test-project \
            && if [ "$(id -u)" = "0" ]; then \
              chmod +x test.sh; \
            else \
              sudo chmod +x test.sh; \
            fi \
            && ./test.sh; \
          else \
            ls -a; 
          fi'
